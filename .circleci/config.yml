version: 2.1
orbs:
  ruby: circleci/ruby@0.1.2

jobs:
  build:
    parallelism: 3
    docker:
      - image: circleci/ruby:2.6.3-stretch-node
        environment: # environment variables for primary container
          BUNDLE_JOBS: 3
          BUNDLE_RETRY: 3
          BUNDLE_PATH: vendor/bundle
          PGHOST: 127.0.0.1
          PGUSER: circleci-demo-ruby
          RAILS_ENV: test
      - image: circleci/postgres:9.5-alpine # database image
        environment:
          POSTGRES_USER: circleci-demo-ruby
          POSTGRES_DB: rails_blog
          POSTGRES_PASSWORD: ""
    steps:
      - checkout

      # Setup bundler -- any way for image cache to include this?
      - run:
          name: Install bundler
          command: gem install bundler:2.1.4

      # Restore bundle cache
      # Read about caching dependencies: https://circleci.com/docs/2.0/caching/
      - restore_cache:
          keys:
            - covid-volunteers-{{ checksum "Gemfile.lock" }}
            - covid-volunteers-

      - run: # Install Ruby dependencies
          name: Bundle Install
          command: bundle check --path vendor/bundle || bundle install --deployment

      # Store bundle cache for Ruby dependencies
      - save_cache:
          key: covid-volunteers-{{ checksum "Gemfile.lock" }}
          paths:
            - vendor/bundle

      # Only necessary if app uses webpacker or yarn in some other way
      - restore_cache:
          keys:
            - covid-volunteers-yarn-{{ checksum "yarn.lock" }}
            - covid-volunteers-yarn-

      - run:
          name: Yarn Install
          command: yarn install --cache-folder ~/.cache/yarn

      # Store yarn / webpacker cache
      - save_cache:
          key: covid-volunteers-yarn-{{ checksum "yarn.lock" }}
          paths:
            - ~/.cache/yarn

      - run:
          name: Wait for DB
          command: dockerize -wait tcp://localhost:5432 -timeout 1m

      - run:
          name: Database setup
          # command: bin/rails db:schema:load --trace
          command: bin/rails db:setup --trace

      - run:
          name: Run rspec in parallel
          command: |
            # bundle exec rubocop
            bundle exec rspec --profile 10 \
                              --out test_results/rspec.xml \
                              --format progress \
                              $(circleci tests glob "spec/**/*_spec.rb" | circleci tests split --split-by=timings)

      # Upload test results for display in Test Summary: https://circleci.com/docs/2.0/collect-test-data/
      - store_test_results:
          path: test_results


workflows:
  version: 2
  build-and-test:
    jobs:
      - build

# See https://circleci.com/docs/2.0/deployment-integrations/ for example deploy configs
